***Study Materials: 
https://github.com/bbatsov/ruby-style-guide
https://www.ruby-lang.org/en/


###Installing Ruby on Rails on CentOS 7, using rbenv**********************
#Install rbenv, which we will use to install and manage our Ruby installation. Install the rbenv and Ruby dependencies with yum
$sudo yum install -y git-core zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison curl sqlite-devel
#Now we are ready to install rbenv. The easiest way to do that is to run these commands, as the user that will be using Ruby
$cd
$git clone git://github.com/sstephenson/rbenv.git .rbenv
$echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
$echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
$exec $SHELL
$git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bash_profile
$exec $SHELL    #This installs rbenv into your home directory, and sets the appropriate environment variables that will allow rbenv to the active version of Ruby
#Now we're ready to install Ruby. Before using rbenv, determine which version of Ruby that you want to install. We will install the latest version, Ruby 2.2.1
#As the user that will be using Ruby, install it with these commands
$rbenv install -v 2.2.1
$rbenv global 2.2.1
#The global sub-command sets the default version of Ruby that all of your shells will use. If you want to install and use a different version, simply run the rbenv commands with a different version number
#Verify that Ruby was installed properly with this command
$ruby -v
#It is likely that you will not want Rubygems to generate local documentation for each gem that you install, as this process can be lengthy. To disable this, run this command
$echo "gem: --no-document" > ~/.gemrc
#You will also want to install the bundler gem, to manage your application dependencies
$gem install bundler
#As the same user, install Rails 4.2.0 with this command
$gem install rails -v 4.2.0
#Whenever you install a new version of Ruby or a gem that provides commands, you should run the rehash sub-command. This will install shims for all Ruby executables known to rbenv, which will allow you to use the executables
$rbenv rehash
#Verify that Rails has been installed properly by printing its version, with this command
$rails -v 
#A few Rails features, such as the Asset Pipeline, depend on a Javascript runtime. We will install Node.js to provide this functionality.
#Add the EPEL yum repository
$sudo yum -y install epel-release
#Then install the Node.js package
$sudo yum install nodejs
###Note: This will probably not install the latest release of Node.js, as Enterprise Linux does not consider it to be "stable". If you want to install the latest version, feel free to build it on your own
###Congratulations! Ruby on Rails is now installed on your system
###Testing the Ruby on Rails Installation 
#If you want to make sure that your Ruby on Rails installation went smoothly, you can quickly create a test application to test it out. For simplicity, our test application will use sqlite3 for its database
$cd ~
$rails new testapp
#Then move into the application's directory
$cd testapp
#Create the sqlite3 database
$rake db:create
#If you don't already know the public IP address of your server, look it up with this command
$ip addr show enp0s3 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'
#Copy the IPv4 address to your clipboard, then use it with this command to start your Rails application: (substitute the highlighted part with the IP address)
$rails server --binding=<server_public_IP>
###If it is working properly, your Rails application should be running on port 3000 of the public IP address of your server. Visit your Rails application by going there in a web browser
###http://server_public_IP:3000
*******************You're now ready to start developing your new Ruby on Rails application. Good luck!****************************************************************************************


###Install sublime Text******************
#Install the gpg key 
$sudo rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg
#Stable 
$sudo yum-config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo
#Dev
$sudo yum-config-manager --add-repo https://download.sublimetext.com/rpm/dev/x86_64/sublime-text.repo
#Update yum and install sublime text
$sudo yum install sublime-text

$rvm list
$rvm use ruby-2.3.0
$rails s -b $IP -p $PORT
$rails new newapp
$$rails server --binding=<server_public_IP>  #To start the rails server cd into the app directory 



$ctrl+l  #clears the screen shortcut 
*****************************Ruby Programming Language*****************************************
#A variable does not point to a variable. A variable points to the assignment of a variable
####String interpolation doesnt work with single quote 
name = "Rumman Ahmed"
"My name is #{name}"  #Prints out the value of the variable name 
###You cannot use signle quote within a single quote. To use single quote inside a string surround it with double quote or you can use the escape character \ to preceede the single quote 
###the stringvar.length method counts the space as a character 

To start irb console:  irb

***************Working with Strings**************************************************************************
String concat structure:  String1 + String2 || String1 + " " + String2 + String3

To find out what class the object belongs to:  Variable_name.class  ||  1.class

To find out methods available to an object:  objectname.methods

Some methods that can be used on objects:  objectname.nil?, objectname.empty?, objectname.length, objectname.reverse

String interpolation (remember has to be within double quotes):  name = "Mashrur" ==> "My name is #{name}"  ##This will print out the value of name in the line "My name is...."

To escape the evaluation of #{variablename} within a String, prepent with a \:  \#{variablename}

To get input from the command line use the following method:  gets.chomp

To assign the input to a variable so it can be referenced later on:  variablename = gets.chomp

******************Working with Numbers******************************************************************************
puts 1 + 2  #To add and display the value of 1 + 2
#Different operations
1 + 2  #Addition
1 * 2  #Multiplication
1 / 2  #Division
1 - 2  #Subtraction
1 % 2  #Modulus (gives the remainder when two numbers are divided)
20 is an integer, 20.0 is a float  #To indicate a number is a float instead of an integer include a . in the number or 20.to_f 
#Methods you can use to find odd and even number:
object.odd?
22.odd?
object.even?
22.even?
#odd number has a remainder of 1 and even number has a remainder of 0 
#Comparisons:
a == b
1 == 2
3 == 3
5 < 2
2 <= 5
5 > 2
5 && 6
5 || 6
#Generate a random number between 0 and less than 10
rand(10)  #Does not include 10 prints out a random number from 0-9
objectname.to_i or "5".to_i  #To convert an string object to integer
objectname.to_s or 5.to_s  #To convert an object to string



*************************************Methods and Branching*************************************************
def multiply(first_number, second_number)
  first_number.to_f * second_number.to_f
end

def divide(first_number, second_number)
  first_number.to_f / second_number.to_f
end

def subtract(first_number, second_number)
  second_number.to_f - first_number.to_f
end

def mod(first_number, second_number) 
  first_number.to_f % second_number.to_f
end

puts "What would you like to do 1)Multiply, 2)Divide, 3)Subtract, 4)Mod"
prompt = gets.chomp 

puts "Please enter First Number"
first_number = gets.chomp
puts "PLease enter Second Number"
second_number = gets.chomp

if prompt == '1'
  puts "You have choosen to multiuply #{first_number} with #{second_number}"
  result = multiply(first_number, second_number)
elsif prompt == '2'
  puts "YOu have choosen to divide #{first_number} with #{second_number}"
  result = divide(first_number, second_number)
elsif prompt == '3'
  puts "You have choosen to subtract #{second_number} from #{first_number}"
  result = subtract(first_number, second_number)
elsif prompt == '4'
  puts "You have choosen to mod #{first_number} with #{second_number}"
  result = mod(first_number, second_number)
else
  puts "You have made an invalid choice"
end 

puts "The result is #{result}"


************************************************Arrays and Iterators**************************************************************************
#An Array is an ordered list of objects and elements. It maintains an index for each item so you can access those elements 
#An Array 
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, "Rumman", [1, 2, 3]]
#Since Arrays have an index associated with each object they are very easy to grab item from the Array to display them 
a[1]
puts a
a.empty?
a.include?("Rumman")
a.reverse
a.reverse!   #mutates the caller
a.shuffle
(0..25).to_a  #takes a range of 0 to 25 and creates an array
y = (0..99).to_a.shuffle!  #takes a range of 0 to 99 creates an array and shuffle the numbers inside the array
z = (0..10).to_a
z
z << 25  #adds an element to an array
z.push(30) #Another way of adding an object to an array 
z.unshift("Rumman")  #Adds an element to the begining of the array 
z[0]
z.pop   #deletes an object from the end of an array 
z.uniq  #hides duplicate elements in an array 
z.uniq! #mutates the caller the duplicates are gone
y.each {|i| puts i}  #to iterate through an array use the .each method. It loops through an array 
#Using the for loop to iterate through an array 
for number in y
puts "Hi"
end 

#Creating an array of strings
names = ["joe", "john", "james"]
#To iterate over the array and print the names with a hello salutation
names.each do |food|
puts "Hello #{food}"
end 

names.each do |food|
puts "Hello #{food.capitalize}"
end 

names.each { |food| puts "Hello #{food.capitalize}" }   #one liner 

y.select { |number| number.odd? }  #The select method takes a boolean expression to evaluate and if that boolean expression evaluates to true its basically gets the number 
y.each { |number| print number if number.odd? }  #another way of iterating the array and printing out the odd numbers 

p = ["My", "name", "is", "Rumman"]
p.join
p.join(' ') 

#######
#Array, created by including elements within square brackets:

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

#The index for an array starts with 0, so in the array above a[0] is 1

#Some methods you can use on arrays:

arrayname.empty?

arrayname.include?(itemname)

arrayname.reverse

arrayname.reverse! # use ! at the end to change the original array

arrayname.shuffle

arrayname.push(30) # will append new element 30 to the end array

arrayname << 25 # << known as shovel operator will also append new element to the end of the array

arrayname.unshift("someelement") # will add element "some element" to the beginning of the array

arrayname.pop # will remove the last element of the array and return 1

arrayname.uniq # will remove all the duplicates and display (will not change the original array)

arrayname.uniq! # will remove all the duplicates in the original array

#A range:

(0..25).to_a

#will create an array with elements from value 0 to 25

(0..99).to_a.shuffle!

#will create an array with elements from value 0 to 99 in random order

#To loop through an array named y using the .each method and print out the value of each element:

y.each { |i| puts i }

#In plain terms: For each element i in array y print the value of i

To execute iteration through an array called names using a block:

names.each do |randomvariablename| # starts the do block

puts "Hello #{randomvariablename}" # executes code for each element

end # ends the do block

#To capitalize (or use another method) on each element of array called names:

names.each { |randomvariablename| puts "Hello #{randomvariablename.capitalize}" }

#Using the select method to pickup all the odd numbers from an array y:

y.select { |number| number.odd? } # selects the value and returns it only if the condition is met

#To join the elements of an array named p:

p.join

#To join the elements of an array with space in between each element:

p.join(" ")

To join the elements of an array with dash in between each element:

p.join("-")


*************************************************************HASHES************************************************************************************************************
#Like Array a hash is a data structure that stores values but unlike array a hash also has keys associated with those values. Hash exist in a key value pair
#The key is usually a symbol but it can be other things as well like a string and the values can be any data type
#Creating a hash with key as strings
my_details = {'name' => 'rumman', 'favcolor' => 'green'}
my_details["favcolor"]  #To call a hash refer to the key 
#creating a hash with key as symbols
myhash = {a: 1, b: 2, c: 3, d: 4} 
myhash[:c]  #to call the value refer to the symbol 
myhash[:e] = 7  #to add value to the hash 
myhash[:name] = "Rumman"
myhash.delete(:b)  #to delete a value from hash 

#To create a hash
number = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9}
#To iterate through a hash
number.each { |k, v| puts "The key is #{k}, and the value is #{v}" }
#To iterate through a hash and delete multiple values 
number.each { |k, v| number.delete(k) if v > 3 }
#To select the odd number in the hash
number = {a: 1, b: 2, c: 3, d: 5, e: 9}
number.select { |k, v| v.odd? }

######
To create a hash called my_details include the elements within { }:

my_details = {'name' => 'mashrur', 'favcolor' => 'red'}

To access the value and notify me what favcolor is:

my_details["favcolor"]

Alternate syntax to create key, value pairs in hash:

myhash = {a: 1, b: 2, c: 3, d: 4}

To access the value for key c above:

myhash[:c]

To add a key,value pair to the hash above:

myhash[:d] = 7

myhash[:name] = "Mashrur"

To delete a key,value pair simply delete the key:

myhash.delete(:d)

To iterate through a hash using .each method and print out value:

myhash.each { |somekey, somevalue| puts somevalue }

To iterate through a hash using .each method and print out both key and value in friendly format:

myhash.each { |somekey, somevalue| puts "The key is #{somekey} and the value is #{somevalue}" }

To iterate through and delete a items from a hash based on a condition (in the condition below if the value is greater than 3:

myhash.each { |k, v| myhash.delete(k) if v > 3 }

Use select method to display items only if value of the item is odd

myhash.select { |k, v| v.odd? }



*************************************Object Oriented Programming(OOP)************************************************************************************************
/**
*Object-oriented programming (OOP) is a programming paradigm that uses objects and their interactions to design and program applications
*Allows the programming to block off areas of code that perform certain tasks independently of other areas in the application 
*
*#Classes: It is a blueprint that describes the state and behavior that the objects of the class all share. A class can be used to create 
*many objects. Objects created at runtime from a class are called instances of that particular class
*
*#Abstraction: Is simplifying a complex process of a program, an enterprise software solution for example by modeling classes 
*appropriate for it 
*
*#Inheritance: Is used where a class inherits the behavior of another class, referred to as the superclass. The class from which 
*the behavior is inherited is called the super class and the class that inheriting that behavior is called the subclass
*
*#Encasulation: Concept of blocking off areas of code and not making it available to the rest of the program 
*
*#Polymorphism: Is when a class inherits the behaviors of another class, but has the ability to not inherit everything and change some
*of it's inherited behaviors. For example to write a method that does something differently from the inherited method  

################Concept Code
class User  #Class declaration
  
  def initialize(name)   #This is the constructor method which initializes the object in other words resets the instance variable whenever a new object is created 
    @name = name
  end
  
  def run               #Instance method part of the User class 
    puts "Hi I am running"
  end 
     
end

user = User.new("Rumman")  #Initalization of an object of the User class 

puts User.ancestors  #Lists out all of the super classes of the User class  

puts user 


**************************Getter and Setter Methods*********************************
class User    #Class declaration 
  
  def initialize(name)   #The constructor 
    @name = name         #@name is the instance variable 
  end
  
  def run                #The run method is the instance method of the class User 
    puts "Hi I am running 
  end 
  
  def get_name   #This is the getter method for the class User 
    @name
  end
  
  def set_name=(name)  #This is the Setter method for the class User 
    @name = name 
  end 
end 

user = User.New("Rumman")
puts user.get_name 
user.set_name = "John"
puts user.get_name 

***************Shortcut for Getter and Setter Methods******************************
class User    #Class declaration 
  attr_accessor :name, :email   #This is the shortcut for getter and setter methods of the class 
  def initialize(name, email)    #The constructor method initializes the instance variable of the object when the object gets created 
    @name = name                 #@name, @email these two are the instance variable of the object it exists as long as the object exists and gets a fresh copy whenever a new object is created 
	@email = email
  end 
  
  def run                        #This is the instance method of the objects of the User class 
    puts "Hi I am running"
  end 
end

user = User.new("Rumman", "rumman@example.com")
puts "My user's name is #{user.name} and his email is #{user.email}"
user.name = "John"
user.email = "john@example.com"
puts "My user's new name is #{user.name} and his email is #{user.email}"





#################Class Method : A class method can be called directly on the class without instantiating any objects 

class User
  attr_accessor :name, :email 
  
  def initialize(name , email)
    @name = name 
	@email = email 
  end 
  
  def run 
    puts "Hi I am running"
  end 
  
  def self.identify_yourself    #This is a class method declared with self. 
    puts "Hey I am a class method"
  end 
end 

User.identify_yourself   #A class method can be called directly on the class without instantiating any objects


################Inheritance and Polymorphism 

class User   #Class Declaration 
  attr_accessor :name, :email    #Shortcut for getter and setter method 
  
  def initialize(name)           #Constructor @name and @email are the two instance variables  
    @name = name 
	@email = email 
  end 
  
  def run                        #Instance method 
    puts "Hi I am running"
  end 
end 

class Buyer < User               #Inheritance. The buyer sub class is inheriting the behaviors of the User super class 
  def run            #Polymorphism. The behavior of the run instance method of the User class is being modified in the Buyer sub class 
    puts "Hi I am not running from the Buyer class" 
  end 
end 

class Seller < User        #Inheritance

end

class Admin < User         #Inheritance 

end 

user = User.new("name", "name@example.com"_)   #Initializing an object of the User class
puts "My user's name is #{user.name} and his email is #{user.email}"

buyer1 = Buyer.new("name1", "name1@example.com")  #Initializing an object of the Buyer class 
buyer.run

seller1 = Seller.new("name2", "name2@example.com")   #Initializing an object of the Seller class 
seller1.run

admin1 = Admin.new("name3", "name3@example.com")     #Initializing an object of the admin class 
admin.run 



###############Module : A Module is similar to a class but, it basically is a collection of behaviors that other classes can use via mixins
#You have to include the Module in the class that you want to use but you cannot have an object of a module 
#You cannot initiate an instance variable of a Module. A Module has to be mixed in to a class and then you can use the methods in a Module 
#By naming convention Modules should have a name ending with able

module Destructable 
  
  def destroy(anyobject)
    puts "I will destroy the object"
  end 
  
end 

class User 
  include Destructable
  
  attr_accessor :name, :email 
  
  def initialize(name, email)
    @name = name 
	@email = email 
  end 
  
#This is a instance method    
  def run 
    puts "Hi I am running"
  end 
  
#This is the class method 

  def self.identify_yourself 
    puts "Hey I am a class method"
  end  
  
end 

User.identify_yourself 

user = User.new("Rumman", "rumman@example.com")

user.destroy("myname") 






=============================Section2 Project=======================================================================
#####Create user_permissions_template.json file
{"accounts": "read",
 "policies": "write",
 "users": "write"}
 
#######Create the user.rb User class 
require 'json'

class User

  attr_accessor :email, :name, :permissions
  
  def initialize(*args)
    @email = args[0]
	@name = args[1]
	@permissions = User.permissions_from_template
  end 
  
  def self.permissions_from_template 
    file = File.read 'user_permissions_template.json' 
	JSON.load(file, nil, symbolize_names: true)
  end 
  
  def save 
    self_json = {email: @email, name: @name, permissions: @permissions}.to_json
    open('users.json', 'a') do |file|
	  file.puts self_json
	end 
  end 
end 

###Create runner.rb 
require 'pp'
require_relative 'user'

user = User.new 'joe@example.com', 'joe'

pp user 

user.save 



************************************************Ruby Style Guide*************************************************************************************
#Use UTF-8 as the source file encoding
#Use two spaces per indentation level (aka soft tabs). No hard tabs
def some_method
  do something 
end 

/**
*Use Unix-style line endings. (*BSD/Solaris/Linux/macOS users are covered by default, Windows users have to be extra careful.)
*If you're using Git you might want to add the following configuration setting to protect your project from Windows line endings creeping in:
*git config --global core.autocrlf true
*
*
*/
